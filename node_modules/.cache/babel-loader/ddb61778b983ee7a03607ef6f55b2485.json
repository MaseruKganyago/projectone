{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport React from 'react';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nvar BASE_URL = \"https://localhost:44352/api/Account\";\n\nvar RegisterAPI = function RegisterAPI(props) {\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    console.log(event.target);\n    var data = {\n      email: event.target.email.value,\n      password: event.target.password.value,\n      confirmpassword: event.target.confirmpassword.value\n    };\n    axios.post(\"\".concat(BASE_URL, \"/Register\"), data).then(function (response) {\n      if (response.status == 200) window.location.href = \"register/registration-succesful\";\n      console.log(response);\n    }).catch(function (err) {\n      return console.log(err.response);\n    });\n  };\n\n  var getFieldDecorator = props.form.getFieldDecorator;\n  var formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 8\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 16\n      }\n    }\n  };\n  var tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0\n      },\n      sm: {\n        span: 16,\n        offset: 8\n      }\n    }\n  };\n  return React.createElement(_Form, _extends({}, formItemLayout, {\n    onSubmit: handleSubmit\n  }), React.createElement(_Form.Item, {\n    label: \"E-mail\"\n  }, getFieldDecorator('email', {\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }]\n  })(React.createElement(_Input, null))), React.createElement(_Form.Item, {\n    label: \"Password\",\n    hasFeedback: true\n  }, getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }]\n  })(React.createElement(_Input.Password, null))), React.createElement(_Form.Item, {\n    label: \"Confirm Password\",\n    hasFeedback: true\n  }, getFieldDecorator('confirm', {\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }]\n  })(React.createElement(_Input.Password, null))), React.createElement(_Form.Item, tailFormItemLayout, React.createElement(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Register\")));\n};\n\nvar WrappedRegisterAPI = _Form.create({\n  name: 'register_api'\n})(RegisterAPI);\n\nexport default WrappedRegisterAPI;","map":{"version":3,"sources":["C:/Users/User/Documents/projectone/api/register.tsx"],"names":["React","axios","BASE_URL","RegisterAPI","props","handleSubmit","event","preventDefault","console","log","target","data","email","value","password","confirmpassword","post","then","response","status","window","location","href","catch","err","getFieldDecorator","form","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","type","message","required","WrappedRegisterAPI","create","name"],"mappings":"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","sourcesContent":["import React, { FC } from 'react';\r\nimport axios from 'axios';\r\nimport { Alert } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete, } from 'antd';\r\n\r\ninterface IProps {\r\n    readonly form?: any;\r\n  }\r\n  \r\nconst BASE_URL = \"https://localhost:44352/api/Account\";\r\n\r\nconst RegisterAPI: FC<IProps> = (props) => {\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        console.log(event.target)\r\n        const data = {\r\n            email: event.target.email.value,\r\n            password: event.target.password.value,\r\n            confirmpassword: event.target.confirmpassword.value\r\n        }\r\n        axios.post(`${BASE_URL}/Register`,data)\r\n        .then(response => {\r\n            if(response.status == 200)\r\n                window.location.href = \"register/registration-succesful\";\r\n                console.log(response)\r\n        })\r\n        .catch(err => console.log(err.response))\r\n    }  \r\n    const { getFieldDecorator } = props.form;\r\n    const formItemLayout = {\r\n        labelCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 8 },\r\n        },\r\n        wrapperCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 16 },\r\n        },\r\n      };\r\n      const tailFormItemLayout = {\r\n        wrapperCol: {\r\n          xs: {\r\n            span: 24,\r\n            offset: 0,\r\n          },\r\n          sm: {\r\n            span: 16,\r\n            offset: 8,\r\n          },\r\n        },\r\n      };\r\n    return (\r\n        <Form {...formItemLayout} onSubmit={handleSubmit}>\r\n        <Form.Item label=\"E-mail\">\r\n          {getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: 'The input is not valid E-mail!',\r\n              },\r\n              {\r\n                required: true,\r\n                message: 'Please input your E-mail!',\r\n              },\r\n            ],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Password\" hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n            ],\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" hasFeedback>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please confirm your password!',\r\n              },\r\n            ],\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n}\r\nconst WrappedRegisterAPI = Form.create({ name: 'register_api' })(RegisterAPI);\r\nexport default WrappedRegisterAPI;"]},"metadata":{},"sourceType":"module"}